using Content.Client.Guidebook;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.ContentPack;
using Robust.Shared.Utility;

namespace Content.Client._FishStation.Darova;

[GenerateTypedNameReferences]
public sealed partial class DarovaWindow : FancyWindow
{
    [Dependency] private readonly IResourceManager _resourceManager = default!;
    [Dependency] private readonly DocumentParsingManager _parsingMan = default!;
    [Dependency] private readonly ILogManager _logManager = default!;

    private readonly ISawmill _sawmill;

    public DarovaWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _sawmill = _logManager.GetSawmill("Fish.we.DarovaPopup");

        PopupCloseButton.OnPressed += _ =>
        {
            Close();
        };
    }

    public int LoadContents(ResPath path)
    {
        using var file = _resourceManager.ContentFileReadText(path);

        var txt = file.ReadToEnd();
        if (!_parsingMan.TryAddMarkup(Contents, txt))
        {
            Contents.AddChild(new Label { Text = "ERROR: Еблан что ли? Путь до документа укажи" });
            _sawmill.Error($"Не удалось понять содержимое документа твоей хуйни {path}.");
        }

        // ну типа тут не нужен хэш сложнее обычного гетхесшкоде
        return txt.GetHashCode();
    }
}
